-- 1. `time_slots` 테이블 생성
-- 이 테이블은 촬영 스케줄링을 위한 1시간 단위의 모든 시간 슬롯을 관리합니다.
CREATE TABLE public.time_slots (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slot_time timestamptz NOT NULL,
    is_open boolean NOT NULL DEFAULT true,
    booking_status text NOT NULL DEFAULT 'available' CHECK (booking_status IN ('available', 'requested', 'confirmed')),
    project_id bigint REFERENCES public.projects(id) ON DELETE SET NULL
);

COMMENT ON TABLE public.time_slots IS '촬영 스케줄링을 위한 1시간 단위 시간 슬롯';
COMMENT ON COLUMN public.time_slots.slot_time IS '슬롯의 시작 시간 (KST 기준)';
COMMENT ON COLUMN public.time_slots.is_open IS '관리자가 예약을 위해 오픈한 시간인지 여부';
COMMENT ON COLUMN public.time_slots.booking_status IS '슬롯의 예약 상태: available, requested, confirmed';
COMMENT ON COLUMN public.time_slots.project_id IS '해당 슬롯을 점유(요청/확정)한 프로젝트의 ID';


-- 2. RLS (Row Level Security) 활성화
ALTER TABLE public.time_slots ENABLE ROW LEVEL SECURITY;


-- 3. RLS 정책 생성
-- `forSupabase.md` 규칙에 따라, auth.jwt()를 사용하여 정책을 정의합니다.

-- SELECT Policy: 인증된 모든 사용자(센터, 관리자)는 모든 시간 슬롯 정보를 조회할 수 있습니다.
CREATE POLICY "Allow authenticated users to read time slots"
ON public.time_slots
FOR SELECT
TO authenticated
USING (true);

-- INSERT, UPDATE, DELETE Policies: 오직 관리자만 슬롯을 직접 생성, 수정, 삭제할 수 있습니다.
-- 센터의 예약 요청(UPDATE) 등은 RLS를 우회하는 service_role 키를 사용하는 백엔드 함수(Edge Function)를 통해 안전하게 처리됩니다.
CREATE POLICY "Allow admins to insert time slots"
ON public.time_slots
FOR INSERT
WITH CHECK (((auth.jwt() ->> 'public_metadata')::jsonb ->> 'is_admin') = 'true');

CREATE POLICY "Allow admins to update time slots"
ON public.time_slots
FOR UPDATE
USING (((auth.jwt() ->> 'public_metadata')::jsonb ->> 'is_admin') = 'true');

CREATE POLICY "Allow admins to delete time slots"
ON public.time_slots
FOR DELETE
USING (((auth.jwt() ->> 'public_metadata')::jsonb ->> 'is_admin') = 'true');


-- 4. 초기 데이터 생성을 위한 Helper Function (선택 사항)
-- `generateDailySlots` 핵심 함수 로직을 SQL 함수로 구현해 둘 수 있습니다.
-- 이 함수는 service_role 키를 사용하는 백엔드에서만 호출해야 합니다.
CREATE OR REPLACE FUNCTION generate_slots_for_date(target_date date)
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    hour_of_day int;
BEGIN
    FOR hour_of_day IN 0..23 LOOP
        INSERT INTO public.time_slots (slot_time)
        VALUES (timezone('Asia/Seoul', target_date::timestamp) + (hour_of_day || ' hours')::interval);
    END LOOP;
END;
$$;

COMMENT ON FUNCTION generate_slots_for_date(date) IS '특정 날짜에 대한 24개의 1시간 단위 시간 슬롯을 생성합니다. KST 기준.';
