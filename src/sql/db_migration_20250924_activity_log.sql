-- 1. Create the project_activity_logs table
CREATE TABLE public.project_activity_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id uuid NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,
    actor_user_id text,
    old_status text,
    new_status text,
    description text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.project_activity_logs IS 'Tracks status changes and other important events for projects.';

-- 2. Enable RLS
ALTER TABLE public.project_activity_logs ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies (Admins can see all logs, users can see logs for their projects)
CREATE POLICY "Allow admins full access to activity logs"
ON public.project_activity_logs
FOR SELECT
USING (((auth.jwt() ->> 'public_metadata')::jsonb ->> 'is_admin') = 'true');

-- This policy allows users to see logs related to projects they own.
-- It requires a join to the projects table to check ownership.
CREATE POLICY "Allow users to read logs for their own projects"
ON public.project_activity_logs
FOR SELECT
USING (
  EXISTS (
    SELECT 1
    FROM projects p
    WHERE p.id = project_activity_logs.project_id AND p.user_id = (auth.jwt() ->> 'sub')
  )
);


-- 4. Create the trigger function
CREATE OR REPLACE FUNCTION public.log_project_status_change()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    actor_id text := auth.jwt() ->> 'sub';
    log_description text;
BEGIN
    -- Generate a human-readable description for the log using a CASE statement for better readability
    log_description := '상태가 ' || COALESCE(OLD.status, '없음') || '에서 ' || COALESCE(NEW.status, '없음') || '(으)로 변경되었습니다.';

    INSERT INTO public.project_activity_logs (project_id, actor_user_id, old_status, new_status, description)
    VALUES (NEW.id, actor_id, OLD.status, NEW.status, log_description);

    RETURN NEW;
END;
$$;

-- 5. Create the trigger on the projects table
-- This trigger will fire after any update on the projects table
DROP TRIGGER IF EXISTS trg_log_status_change ON public.projects;
CREATE TRIGGER trg_log_status_change
AFTER UPDATE ON public.projects
FOR EACH ROW
WHEN (OLD.status IS DISTINCT FROM NEW.status) -- Only run if the status has actually changed
EXECUTE FUNCTION public.log_project_status_change();
